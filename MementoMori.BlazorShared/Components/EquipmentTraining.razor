@using MementoMori.BlazorShared.Models
@using MementoMori.Ortega.Custom
@using MementoMori.Ortega.Share.Enums
@using ReactiveUI
@using static Ortega.Share.Masters

@inherits AccountComponent

<MudPaper Elevation="0" Class="pa-2">
    <MudSelect Dense="true" Variant="Variant.Outlined" Label="@Tr("[CommonFooterCharacterButtonLabel]")" T="CharacterInfo" @bind-SelectedValue="_selectedCharacterGuid" ValueChanged="SelectedCharacterChanged">
        @foreach (var info in _characterGuids)
        {
            <MudSelectItem T="CharacterInfo" Value="info">
                @info.Name lv @info.Lv
            </MudSelectItem>
        }
    </MudSelect>
    <MudSelect T="string" Label="@TextResourceTable.Get("[CommonEquipmentLabel]")" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@Funcs.TrainingEquipmentGuid" Dense="true">
        @foreach (var e in _characterEquipments)
        {
            <MudSelectItem T="string" Value="e.EquipmentGuid">
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2">@($"{e.CharacterName} {e.EquipmentName}/{e.UserEquipmentDtoInfo.ReinforcementLv}")</MudText>
                    <div>
                        @foreach (var item in Enum.GetValues<BaseParameterType>())
                        {
                            <MudText Inline="true" Typo="Typo.caption">
                                @($"{TextResourceTable.Get(item)}{e.UserEquipmentDtoInfo.GetAdditionalParameter(item)}")
                            </MudText>
                        }
                    </div>
                </MudStack>
            </MudSelectItem>
        }
    </MudSelect>
    <MudSelect Dense="true" T="BaseParameterType" @bind-Value="@Funcs.EquipmentTrainingTargetType" Label="@TextResourceTable.Get("[CommonBaseParameterLabel]")" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
        @foreach (var item in Enum.GetValues<BaseParameterType>())
        {
            <MudSelectItem T="BaseParameterType" Value="@item">
                @TextResourceTable.Get(item)
            </MudSelectItem>
        }
    </MudSelect>
    @{
        var characterEquipment = _characterEquipments.FirstOrDefault(d => d.EquipmentGuid == Funcs.TrainingEquipmentGuid);
        var equipmentMb = EquipmentTable.GetById(characterEquipment?.UserEquipmentDtoInfo.EquipmentId ?? 0);
    }
    <MudSlider T="double" Min="0d" Max="0.6d" @bind-Value="@Funcs.EquipmentTrainingTargetPercent" Step="0.01">
        @(((equipmentMb?.AdditionalParameterTotal ?? 0) * Funcs.EquipmentTrainingTargetPercent).ToString("F0")) (@Funcs.EquipmentTrainingTargetPercent.ToString("P0"))
    </MudSlider>
    <MudButton Variant="Variant.Filled" Disabled="@Funcs.IsQuickActionExecuting" @onclick="@Funcs.AutoEquipmentTraning">@TextResourceTable.Get("[CommonForgedLabel]")</MudButton>
</MudPaper>

@code {
    private List<CharacterEquipment> _characterEquipments = new();
    private string? _selectedCharacterGuid;
    private List<CharacterInfo> _characterGuids = new();

    protected override Task AccountChanged()
    {
        Funcs.WhenAnyValue(d => d.UserSyncData).Subscribe(data =>
        {
            _selectedCharacterGuid = data?.UserCharacterDtoInfos?.FirstOrDefault()?.Guid;
            var chas = data?.UserEquipmentDtoInfos?.GroupBy(d => d.CharacterGuid).ToDictionary(d => d.Key);
            _characterGuids = data?.UserCharacterDtoInfos?.Where(d => chas?.ContainsKey(d.Guid) ?? false).Select(d =>
            {
                var isLevelLinkMember = AccountManager.Current.Funcs.UserSyncData.IsLevelLinkMember(d.Guid);
                var level = isLevelLinkMember ? AccountManager.Current.Funcs.UserSyncData.GetLevelLinkLevel(d.CharacterId) : d.Level;
                var characterName = CharacterTable.GetCharacterName(d.CharacterId);
                return new CharacterInfo(characterName, level, d.Guid, CharacterTable.GetById(d.CharacterId).JobFlags);
            }).OrderByDescending(d => d.Lv).ToList() ?? [];
        });
        return Task.CompletedTask;
    }

    private void SelectedCharacterChanged(CharacterInfo obj)
    {
        var data = Funcs.UserSyncData;
        _characterEquipments = data?.UserEquipmentDtoInfos?.Where(d => !string.IsNullOrEmpty(d.CharacterGuid)).Select(d =>
            {
                if (d == null) throw new ArgumentNullException(nameof(d));
                var cha = data.UserCharacterDtoInfos.ToList().Find(x => x.Guid == d.CharacterGuid);
                var name = CharacterTable.GetCharacterName(cha?.CharacterId ?? 0);
                var equipmentMb = EquipmentTable.GetById(d.EquipmentId);
                if (equipmentMb.EquipmentLv < 180)
                {
                    return null;
                }

                var equipmentName = TextResourceTable.Get(equipmentMb.NameKey);
                return new CharacterEquipment
                {
                    CharacterGuid = d.CharacterGuid, CharacterName = name, EquipmentGuid = d.Guid, EquipmentName = equipmentName, UserEquipmentDtoInfo = d
                };
            }).Where(d => d != null)
            .Where(d => d.CharacterGuid == obj.Guid)
            .OrderBy(d => d.CharacterGuid).ToList() ?? [];
        Funcs.TrainingEquipmentGuid = _characterEquipments.FirstOrDefault()?.EquipmentGuid;
        Funcs.EquipmentTrainingTargetType = obj.Job switch
        {
            JobFlags.Warrior => BaseParameterType.Muscle,
            JobFlags.Sorcerer => BaseParameterType.Intelligence,
            JobFlags.Sniper => BaseParameterType.Energy,
            _ => BaseParameterType.Health
        };
        Funcs.EquipmentTrainingTargetPercent = 0.55;

        InvokeAsync(() => StateHasChanged());
    }

    private record CharacterInfo(string Name, long Lv, string Guid, JobFlags Job);

}